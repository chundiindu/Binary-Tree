class Solution
{
    //Function to return the level order traversal of a tree.
    static ArrayList <Integer> levelOrder(Node node) 
    {
        Queue<Node> q=new LinkedList<>();
        ArrayList<Integer> list= new ArrayList<Integer>();
        if(node==null)
        {
            return null;
        }
        q.add(node);
        while(q.isEmpty()==false)
        {
            int levelnum = q.size();
            //ArrayList<Integer> sublist =new ArrayList<Integer>();
            for(int i=0;i<levelnum;i++)
            {
                if(q.peek().left!=null)
                {
                    q.add(q.peek().left);
                }
                if(q.peek().right!=null)
                {
                    q.add(q.peek().right);
                }
               list.add(q.poll().data);
            }
            
        }
       return list;
    }
}


class Level_Order_Traverse
{
    //Function to return the level order traversal line by line of a tree.
     static ArrayList<ArrayList<Integer>> levelOrder(Node node) {
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        Queue<Node> q = new ArrayDeque<>();
        q.add(node);
        while(!q.isEmpty()) {
            ArrayList<Integer> temp = new ArrayList<>();
            int n = q.size();
            for(int i = 0; i < n; i++) {
                node = q.poll();
                temp.add(node.data);
                if(node.left != null) q.add(node.left);
                if(node.right != null) q.add(node.right);
            }
            list.add(temp);
        }
        return list;
    }
    }
    
    
    class Solution {
   public List<List<Integer>> levelOrder(TreeNode root) {
	Queue<TreeNode> queue = new LinkedList<>();
	List<List<Integer>> list = new ArrayList<>();
	if(root == null) return list;
	queue.add(root);

	while(!queue.isEmpty()) {
		List<Integer> tempList = new ArrayList<>();
		int size = queue.size();
		for(int i = 1; i <= size; i++) {
			TreeNode node = queue.poll();

			tempList.add(node.val);
			if(node.left != null) 
				queue.add(node.left);
			if(node.right != null) 
				queue.add(node.right);
		}
		list.add(new ArrayList<>(tempList));
	}

	return list;
}
}

